//F# Parser generated by Rustlr for grammar json
    
module Json
open System;
open System.Collections.Generic;
open Fussless;
open Fussless.RuntimeParser;
open Option;
type jval = Integer of int | Float of float | Bool of bool | Null | Str of string | Map of Dictionary<string,jval> | Seq of ResizeArray<jval>
let rec jsondumps = function
  | jval.Integer(n) -> string(n)
  | Float(n) -> string(n)
  | Bool(n) -> string(n)
  | Null -> "null"
  | Str(s) -> s  //"\"" + s + "\""
  | Seq(s) ->
     let mutable atleastone = false
     let mutable str = "["
     for v in s do
        if atleastone then str <- str + ", "
        atleastone <- true
        str <- str + (jsondumps v)
     str + "]"
  | Map(m) ->
     let mutable atleastone = false
     let mutable str = "{"
     for kvp in m do
        if atleastone then str <- str + ", "
        atleastone <- true
        str <- str + (sprintf "%s:%s" kvp.Key (jsondumps kvp.Value))
     str + "}"

let private SYMBOLS = [|"_WILDCARD_TOKEN_";"LBRACE";"RBRACE";"LBRACK";"RBRACK";"LPAREN";"RPAREN";"COLON";"NULL";"MINUS";"TRUE";"FALSE";"COMMA";"STRING";"NUM";"FLOAT";"Value";"Object";"List";"Integer";"Floatpt";"Boolean";"KeyValuePair";"NEWRENT_0_0";"NEWSEPNT_15_0";"NEWSEPNT2_17_1";"NEWSEPNT_20_0";"NEWSEPNT2_22_1";"START";"EOF"|];

let private TABLE:uint64 [] = [|4295360512UL;55835230208UL;42950197248UL;60129542146UL;38654836736UL;47245361152UL;98784837633UL;73015361537UL;77309476865UL;85899804673UL;68720459777UL;12885098496UL;21475622912UL;90195165185UL;81604706305UL;64424509442UL;34360000512UL;281599531483138UL;281483567366146UL;281500747235330UL;281526517039106UL;281492157300738UL;563014377996290UL;563010083028994UL;844446405754880UL;844528010395649UL;844463584968704UL;844485059674114UL;844497945493505UL;844506534838273UL;844532305428481UL;844467880329216UL;844510829936641UL;844515125297153UL;844442111115266UL;844480765362176UL;844459290132480UL;844489354641410UL;844472175493120UL;844493650788353UL;844502239608833UL;844437815230464UL;844523714969601UL;844429225492480UL;1125917087498242UL;1125925677432834UL;1126024461680642UL;1125951447236610UL;1125908497563650UL;1407499437998082UL;1407400653750274UL;1407392063815682UL;1407426423554050UL;1407383473881090UL;1688965825691649UL;1688961530789889UL;1688905696280576UL;1688858451640322UL;1688944350789633UL;1970376377040898UL;1970333427367938UL;1970342017302530UL;1970350607237122UL;1970449391484930UL;2251808403881986UL;2251825583751170UL;2251851353554946UL;2251924367998978UL;2251816993816578UL;2533339216478208UL;2533334921445376UL;2814766947565570UL;2814775537500162UL;2814758357630978UL;2814874321747970UL;2814801307303938UL;3096276283752450UL;3096241924014082UL;3096250513948674UL;3096349298196482UL;3096233334079490UL;3377772735889409UL;3377704015888384UL;3377742670725120UL;3377764145037314UL;3377789915693057UL;3377785620332545UL;3377712605626368UL;3377768441643009UL;3377759850070018UL;3377738375364608UL;3377746965889024UL;3377781325234177UL;3377798505365505UL;3377777030004737UL;3377721196150784UL;3377734080528384UL;3377755555758080UL;3659226237370370UL;3659183287697410UL;3659200467566594UL;3659191877632002UL;3659299251814402UL;3940774228656130UL;3940675444408322UL;3940666854473730UL;3940658264539138UL;3940701214212098UL;4222249204711427UL;4503616808419330UL;4503651168681984UL;4785091785719808UL;5066566761644034UL;5066601121382402UL;5348033148747778UL;5348076098420738UL;5629508125982720UL;5911026052431872UL;5910983102365698UL;6192479554371584UL;6473950234279938UL;6474049018527746UL;6473941644345346UL;6473933054410754UL;6473976004083714UL;6755425211056130UL;6755408031186946UL;6755416621121538UL;6755523995303938UL;6755450980859906UL;7036900189601792UL;7318409524019202UL;7318353689837568UL;7318413818986498UL;7318448179314689UL;7318435294281729UL;7318422409838593UL;7318383754477568UL;7318439589642241UL;7318426703953921UL;7318405229707264UL;7318396639838208UL;7318370870099968UL;7318362279575552UL;7318418116050945UL;7318388049313792UL;7318392344674304UL;7318430999183361UL;7599875912040450UL;7599948926484482UL;7599850142236674UL;7599832962367490UL;7599841552302082UL;7881423903522818UL;7881325119275010UL;7881316529340418UL;7881350889078786UL;7881307939405826UL;8162868816052225UL;8162830160625664UL;8444339496484865UL;8444309430861826UL;8444270776942592UL;8444287956156416UL;8444335201124353UL;8444262186418176UL;8444253596680192UL;8444283661320192UL;8444292251516928UL;8444296546680832UL;8444318023024641UL;8444322316681217UL;8444348086157313UL;8444330906025985UL;8444326610796545UL;8444305136549888UL;8444313725829122UL;8725750048686082UL;8725775818489858UL;8725848832933890UL;8725741458751490UL;8725732868816898UL;9007250795397122UL;9007216435658754UL;9288682822762498UL;9288725772435458UL;9570157799014402UL;9570200748687362UL; |];


//Enum for return values 
type FLTypeDUnion = | Enumvariant_12 of (string*jval) | Enumvariant_0 of jval | Enumvariant_17 of jval option | Enumvariant_16 of Vec<jval> | Enumvariant_15 of Vec<(string*jval)> | Enumvariant_3 of string | Enumvariant_9 of int | Enumvariant_2 of int*int | Enumvariant_10 of float | Enumvariant_7 of Dictionary<string,jval> | Enumvariant_1 of unit | Enumvariant_8 of ResizeArray<jval> | Enumvariant_11 of bool ;;

let _rrsemaction_0_(parser:RTParser<FLTypeDUnion,unit>) =  None 

let _rrsemaction_1_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval) =  Some(_item0_) 

let _rrsemaction_2_(parser:RTParser<FLTypeDUnion,unit>, m:jval option, n:int) = if (isNone m) then n else -1*n

let _rrsemaction_3_(parser:RTParser<FLTypeDUnion,unit>, m:jval option, n:float) = if (isNone m) then n else -1.0*n

let _rrsemaction_4_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval) = true

let _rrsemaction_5_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval) = false

let _rrsemaction_6_(parser:RTParser<FLTypeDUnion,unit>, n:int) =  jval.Integer(n) 

let _rrsemaction_7_(parser:RTParser<FLTypeDUnion,unit>, n:float) =  jval.Float(n) 

let _rrsemaction_8_(parser:RTParser<FLTypeDUnion,unit>, b:bool) =  jval.Bool(b) 

let _rrsemaction_9_(parser:RTParser<FLTypeDUnion,unit>, s:string) = jval.Str(s)

let _rrsemaction_10_(parser:RTParser<FLTypeDUnion,unit>, s:Dictionary<string,jval>) = jval.Map(s)

let _rrsemaction_11_(parser:RTParser<FLTypeDUnion,unit>, s:ResizeArray<jval>) = jval.Seq(s)

let _rrsemaction_12_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval) = jval.Null

let _rrsemaction_13_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval, v:jval, _item2_:jval) = v

let _rrsemaction_14_(parser:RTParser<FLTypeDUnion,unit>, k:string, _item1_:jval, v:jval) =  (k,v) 

let _rrsemaction_15_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval) =  let _yyv = Vec<jval>() in (_yyv.Add(_item0_); _yyv) 

let _rrsemaction_16_(parser:RTParser<FLTypeDUnion,unit>, _item0_:Vec<jval>, _item1_:jval, _item2_:jval) =  (_item0_.Add(_item2_); _item0_) 

let _rrsemaction_17_(parser:RTParser<FLTypeDUnion,unit>) =  Vec<jval>() 

let _rrsemaction_18_(parser:RTParser<FLTypeDUnion,unit>, _item0_:Vec<jval>) = _item0_ 

let _rrsemaction_19_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval, vs:Vec<jval>, _item2_:jval) =  vs 

let _rrsemaction_20_(parser:RTParser<FLTypeDUnion,unit>, _item0_:(string*jval)) =  let _yyv = Vec<(string*jval)>() in (_yyv.Add(_item0_); _yyv) 

let _rrsemaction_21_(parser:RTParser<FLTypeDUnion,unit>, _item0_:Vec<(string*jval)>, _item1_:jval, _item2_:(string*jval)) =  (_item0_.Add(_item2_); _item0_) 

let _rrsemaction_22_(parser:RTParser<FLTypeDUnion,unit>) =  Vec<(string*jval)>() 

let _rrsemaction_23_(parser:RTParser<FLTypeDUnion,unit>, _item0_:Vec<(string*jval)>) = _item0_ 

let _rrsemaction_24_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval, kvs:Vec<(string*jval)>, _item2_:jval) = 
  let map = Dictionary<string,jval>()
  for (key,value) in kvs do map.[key]<-value
  map
  

let _rrsemaction_25_(parser:RTParser<FLTypeDUnion,unit>, _item0_:jval) =   Unchecked.defaultof<unit>

let make_parser() : RTParser<FLTypeDUnion,unit> =
  let parser1 = skeleton_parser(Unchecked.defaultof<unit>,26,35)
  let mutable rule = skeleton_production("")
  rule <- skeleton_production("NEWRENT_0_0")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_17(_rrsemaction_0_(parser)));
  parser1.Rules.[0] <- rule;
  rule <- skeleton_production("NEWRENT_0_0")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_17(_rrsemaction_1_(parser,_item0_)));
  parser1.Rules.[1] <- rule;
  rule <- skeleton_production("Integer")
  rule.action <- fun parser ->
    (let n = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_9(_rr_9) ->  _rr_9 | _ -> Unchecked.defaultof<int>) in let m = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_17(_rr_17) ->  _rr_17 | _ -> Unchecked.defaultof<jval option>) in  FLTypeDUnion.Enumvariant_9(_rrsemaction_2_(parser,m,n)));
  parser1.Rules.[2] <- rule;
  rule <- skeleton_production("Floatpt")
  rule.action <- fun parser ->
    (let n = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_10(_rr_10) ->  _rr_10 | _ -> Unchecked.defaultof<float>) in let m = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_17(_rr_17) ->  _rr_17 | _ -> Unchecked.defaultof<jval option>) in  FLTypeDUnion.Enumvariant_10(_rrsemaction_3_(parser,m,n)));
  parser1.Rules.[3] <- rule;
  rule <- skeleton_production("Boolean")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_11(_rrsemaction_4_(parser,_item0_)));
  parser1.Rules.[4] <- rule;
  rule <- skeleton_production("Boolean")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_11(_rrsemaction_5_(parser,_item0_)));
  parser1.Rules.[5] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let n = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_9(_rr_9) ->  _rr_9 | _ -> Unchecked.defaultof<int>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_6_(parser,n)));
  parser1.Rules.[6] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let n = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_10(_rr_10) ->  _rr_10 | _ -> Unchecked.defaultof<float>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_7_(parser,n)));
  parser1.Rules.[7] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let b = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_11(_rr_11) ->  _rr_11 | _ -> Unchecked.defaultof<bool>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_8_(parser,b)));
  parser1.Rules.[8] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let s = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_9_(parser,s)));
  parser1.Rules.[9] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let s = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_7(_rr_7) ->  _rr_7 | _ -> Unchecked.defaultof<Dictionary<string,jval>>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_10_(parser,s)));
  parser1.Rules.[10] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let s = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_8(_rr_8) ->  _rr_8 | _ -> Unchecked.defaultof<ResizeArray<jval>>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_11_(parser,s)));
  parser1.Rules.[11] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_12_(parser,_item0_)));
  parser1.Rules.[12] <- rule;
  rule <- skeleton_production("Value")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_0(_rrsemaction_13_(parser,_item0_,v,_item2_)));
  parser1.Rules.[13] <- rule;
  rule <- skeleton_production("KeyValuePair")
  rule.action <- fun parser ->
    (let v = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let k = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_3(_rr_3) ->  _rr_3 | _ -> Unchecked.defaultof<string>) in  FLTypeDUnion.Enumvariant_12(_rrsemaction_14_(parser,k,_item1_,v)));
  parser1.Rules.[14] <- rule;
  rule <- skeleton_production("NEWSEPNT_15_0")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_16(_rrsemaction_15_(parser,_item0_)));
  parser1.Rules.[15] <- rule;
  rule <- skeleton_production("NEWSEPNT_15_0")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_16(_rr_16) ->  _rr_16 | _ -> Unchecked.defaultof<Vec<jval>>) in  FLTypeDUnion.Enumvariant_16(_rrsemaction_16_(parser,_item0_,_item1_,_item2_)));
  parser1.Rules.[16] <- rule;
  rule <- skeleton_production("NEWSEPNT2_17_1")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_16(_rrsemaction_17_(parser)));
  parser1.Rules.[17] <- rule;
  rule <- skeleton_production("NEWSEPNT2_17_1")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_16(_rr_16) ->  _rr_16 | _ -> Unchecked.defaultof<Vec<jval>>) in  FLTypeDUnion.Enumvariant_16(_rrsemaction_18_(parser,_item0_)));
  parser1.Rules.[18] <- rule;
  rule <- skeleton_production("List")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let vs = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_16(_rr_16) ->  _rr_16 | _ -> Unchecked.defaultof<Vec<jval>>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_8(_rrsemaction_19_(parser,_item0_,vs,_item2_)));
  parser1.Rules.[19] <- rule;
  rule <- skeleton_production("NEWSEPNT_20_0")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_12(_rr_12) ->  _rr_12 | _ -> Unchecked.defaultof<(string*jval)>) in  FLTypeDUnion.Enumvariant_15(_rrsemaction_20_(parser,_item0_)));
  parser1.Rules.[20] <- rule;
  rule <- skeleton_production("NEWSEPNT_20_0")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_12(_rr_12) ->  _rr_12 | _ -> Unchecked.defaultof<(string*jval)>) in let _item1_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_15(_rr_15) ->  _rr_15 | _ -> Unchecked.defaultof<Vec<(string*jval)>>) in  FLTypeDUnion.Enumvariant_15(_rrsemaction_21_(parser,_item0_,_item1_,_item2_)));
  parser1.Rules.[21] <- rule;
  rule <- skeleton_production("NEWSEPNT2_22_1")
  rule.action <- fun parser ->
    ( FLTypeDUnion.Enumvariant_15(_rrsemaction_22_(parser)));
  parser1.Rules.[22] <- rule;
  rule <- skeleton_production("NEWSEPNT2_22_1")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_15(_rr_15) ->  _rr_15 | _ -> Unchecked.defaultof<Vec<(string*jval)>>) in  FLTypeDUnion.Enumvariant_15(_rrsemaction_23_(parser,_item0_)));
  parser1.Rules.[23] <- rule;
  rule <- skeleton_production("Object")
  rule.action <- fun parser ->
    (let _item2_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in let kvs = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_15(_rr_15) ->  _rr_15 | _ -> Unchecked.defaultof<Vec<(string*jval)>>) in let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_7(_rrsemaction_24_(parser,_item0_,kvs,_item2_)));
  parser1.Rules.[24] <- rule;
  rule <- skeleton_production("START")
  rule.action <- fun parser ->
    (let _item0_ = (match parser.Pop().svalue with | FLTypeDUnion.Enumvariant_0(_rr_0) ->  _rr_0 | _ -> Unchecked.defaultof<jval>) in  FLTypeDUnion.Enumvariant_1(_rrsemaction_25_(parser,_item0_)));
  parser1.Rules.[25] <- rule;
  ignore (parser1.resynch.Add("RBRACE"));
  ignore (parser1.resynch.Add("RBRACK"));
  ignore (parser1.resynch.Add("COMMA"));

  for i in 0..187 do
    let (sti,symi,action) = decode_action(TABLE.[i])
    parser1.RSM.[sti].Add(SYMBOLS.[symi],action)
  for s in SYMBOLS do ignore (parser1.Symset.Add(s));
  parser1;;

let convert_token (lt:RawToken) =
  if lt=null then None
  else
    let (uval,utype) = 
      match lt.token_name with
        | "StrLit" -> (FLTypeDUnion.Enumvariant_3((fun (x:string) -> x.Substring(1,x.Length-2))(lt.token_text)),"STRING")
        | "Num" -> (FLTypeDUnion.Enumvariant_9(int(lt.token_text)),"NUM")
        | "Float" -> (FLTypeDUnion.Enumvariant_10(float(lt.token_text)),"FLOAT")
        | "{" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"LBRACE")
        | "[" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"LBRACK")
        | "null" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"NULL")
        | "-" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"MINUS")
        | "," -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"COMMA")
        | "true" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"TRUE")
        | "(" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"LPAREN")
        | "}" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"RBRACE")
        | ")" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"RPAREN")
        | "]" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"RBRACK")
        | "false" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"FALSE")
        | ":" -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"COLON")
        | "EOF" -> (FLTypeDUnion.Enumvariant_1(Unchecked.defaultof<unit>),"EOF")
        | x -> (FLTypeDUnion.Enumvariant_0(Unchecked.defaultof<jval>),"Error:"+x)
    Some({TerminalToken.sym=utype; svalue=uval; line=lt.line; column=lt.column;});;

let parse_with(parser:RTParser<FLTypeDUnion,unit>, lexer:AbstractLexer<unit>) : jval option  =
  lexer.set_shared(parser.exstate)
  parser.NextToken <- fun () -> convert_token(lexer.next_lt())
  match parser.parse_core() with
    | Some(FLTypeDUnion.Enumvariant_0(_yyxres_)) -> Some(_yyxres_)
    | _ -> None;;

